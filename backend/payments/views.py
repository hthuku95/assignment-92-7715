content='from rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom django.utils import timezone\nfrom decimal import Decimal\nimport stripe\nimport logging\n\nfrom .models import Payment, PaymentMethod\nfrom .serializers import PaymentSerializer, PaymentMethodSerializer\nfrom orders.models import Order\nfrom notifications.utils import send_notification\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n# Configure Stripe\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\n@api_view([\'POST\'])\n@permission_classes([IsAuthenticated])\ndef create_payment_intent(request):\n    """\n    Create a Stripe PaymentIntent for an order.\n    """\n    try:\n        order_id = request.data.get(\'order_id\')\n        if not order_id:\n            return Response(\n                {\'error\': \'Order ID is required\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        # Get the order\n        try:\n            order = Order.objects.get(id=order_id, user=request.user)\n        except Order.DoesNotExist:\n            return Response(\n                {\'error\': \'Order not found\'},\n                status=status.HTTP_404_NOT_FOUND\n            )\n\n        if order.status != \'pending\':\n            return Response(\n                {\'error\': \'Order is not in pending status\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        # Convert amount to cents for Stripe\n        amount_cents = int(order.total_amount * 100)\n\n        # Create PaymentIntent\n        intent = stripe.PaymentIntent.create(\n            amount=amount_cents,\n            currency=\'usd\',\n            customer=request.user.stripe_customer_id if hasattr(request.user, \'stripe_customer_id\') else None,\n            metadata={\n                \'order_id\': str(order.id),\n                \'user_id\': str(request.user.id)\n            },\n            automatic_payment_methods={\'enabled\': True}\n        )\n\n        # Create Payment record\n        payment = Payment.objects.create(\n            user=request.user,\n            order=order,\n            stripe_payment_intent_id=intent.id,\n            amount=order.total_amount,\n            currency=\'USD\',\n            status=\'pending\'\n        )\n\n        logger.info(f"Payment intent created: {intent.id} for order: {order.id}")\n\n        return Response({\n            \'client_secret\': intent.client_secret,\n            \'payment_id\': payment.id,\n            \'amount\': order.total_amount\n        }, status=status.HTTP_201_CREATED)\n\n    except stripe.error.StripeError as e:\n        logger.error(f"Stripe error creating payment intent: {str(e)}")\n        return Response(\n            {\'error\': \'Payment processing error\'},\n            status=status.HTTP_400_BAD_REQUEST\n        )\n    except Exception as e:\n        logger.error(f"Error creating payment intent: {str(e)}")\n        return Response(\n            {\'error\': \'Internal server error\'},\n            status=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n\n@api_view([\'POST\'])\n@permission_classes([IsAuthenticated])\ndef confirm_payment(request):\n    """\n    Confirm payment completion and update order status.\n    """\n    try:\n        payment_intent_id = request.data.get(\'payment_intent_id\')\n        if not payment_intent_id:\n            return Response(\n                {\'error\': \'Payment intent ID is required\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        # Retrieve the PaymentIntent from Stripe\n        intent = stripe.PaymentIntent.retrieve(payment_intent_id)\n\n        if intent.status != \'succeeded\':\n            return Response(\n                {\'error\': \'Payment not completed\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        # Update payment record\n        try:\n            payment = Payment.objects.get(' additional_kwargs={} response_metadata={'id': 'msg_01XwbPDEt91hTyXCcNwSpGcK', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 388, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--cb7eb330-460e-4c30-8354-011a69a65c8d-0' usage_metadata={'input_tokens': 388, 'output_tokens': 1024, 'total_tokens': 1412, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}