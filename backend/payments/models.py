content='from decimal import Decimal\nfrom django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.utils import timezone\nfrom django.core.exceptions import ValidationError\nimport uuid\nimport logging\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n\nclass PaymentMethod(models.Model):\n    """Model to store customer payment methods"""\n    PAYMENT_TYPES = [\n        (\'card\', \'Credit/Debit Card\'),\n        (\'paypal\', \'PayPal\'),\n        (\'bank_transfer\', \'Bank Transfer\'),\n        (\'wallet\', \'Digital Wallet\'),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\'payment_methods\')\n    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPES)\n    stripe_payment_method_id = models.CharField(max_length=255, unique=True, null=True, blank=True)\n    \n    # Card details (encrypted/tokenized)\n    last_four_digits = models.CharField(max_length=4, blank=True)\n    card_brand = models.CharField(max_length=50, blank=True)\n    expiry_month = models.PositiveIntegerField(\n        validators=[MinValueValidator(1), MaxValueValidator(12)],\n        null=True, blank=True\n    )\n    expiry_year = models.PositiveIntegerField(null=True, blank=True)\n    \n    # PayPal details\n    paypal_email = models.EmailField(blank=True)\n    \n    # Bank transfer details\n    bank_name = models.CharField(max_length=100, blank=True)\n    account_holder_name = models.CharField(max_length=100, blank=True)\n    \n    is_default = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'payment_methods\'\n        ordering = [\'-is_default\', \'-created_at\']\n        indexes = [\n            models.Index(fields=[\'user\', \'is_active\']),\n            models.Index(fields=[\'stripe_payment_method_id\']),\n        ]\n    \n    def __str__(self):\n        if self.payment_type == \'card\' and self.last_four_digits:\n            return f"{self.card_brand} ending in {self.last_four_digits}"\n        elif self.payment_type == \'paypal\' and self.paypal_email:\n            return f"PayPal - {self.paypal_email}"\n        elif self.payment_type == \'bank_transfer\' and self.bank_name:\n            return f"{self.bank_name} - {self.account_holder_name}"\n        return f"{self.get_payment_type_display()}"\n    \n    def save(self, *args, **kwargs):\n        # Ensure only one default payment method per user\n        if self.is_default:\n            PaymentMethod.objects.filter(\n                user=self.user, is_default=True\n            ).exclude(pk=self.pk).update(is_default=False)\n        super().save(*args, **kwargs)\n    \n    def clean(self):\n        """Validate payment method data"""\n        if self.payment_type == \'card\':\n            if not self.last_four_digits or not self.card_brand:\n                raise ValidationError("Card details are required for card payment type")\n        elif self.payment_type == \'paypal\':\n            if not self.paypal_email:\n                raise ValidationError("PayPal email is required for PayPal payment type")\n        elif self.payment_type == \'bank_transfer\':\n            if not self.bank_name or not self.account_holder_name:\n                raise ValidationError("Bank details are required for bank transfer' additional_kwargs={} response_metadata={'id': 'msg_01GNv8dzQEcoVApu6kcbCsey', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 399, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--a93660c1-1519-4adb-a032-1c9d6d4dfddc-0' usage_metadata={'input_tokens': 399, 'output_tokens': 1024, 'total_tokens': 1423, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}