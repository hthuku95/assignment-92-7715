content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom decimal import Decimal\nfrom .models import Order, OrderItem, Cart, CartItem\nfrom products.models import Product\nfrom products.serializers import ProductSerializer\n\nUser = get_user_model()\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    """Serializer for order items with product details"""\n    product = ProductSerializer(read_only=True)\n    product_id = serializers.IntegerField(write_only=True)\n    subtotal = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)\n\n    class Meta:\n        model = OrderItem\n        fields = [\n            \'id\', \'product\', \'product_id\', \'quantity\', \n            \'price\', \'subtotal\'\n        ]\n        read_only_fields = [\'id\', \'price\', \'subtotal\']\n\n    def validate_product_id(self, value):\n        """Validate that the product exists and is active"""\n        try:\n            product = Product.objects.get(id=value)\n            if not product.is_active:\n                raise serializers.ValidationError("Product is not available")\n            return value\n        except Product.DoesNotExist:\n            raise serializers.ValidationError("Product does not exist")\n\n    def validate_quantity(self, value):\n        """Validate quantity is positive"""\n        if value <= 0:\n            raise serializers.ValidationError("Quantity must be greater than 0")\n        return value\n\n    def validate(self, data):\n        """Validate stock availability"""\n        if \'product_id\' in data and \'quantity\' in data:\n            try:\n                product = Product.objects.get(id=data[\'product_id\'])\n                if product.stock < data[\'quantity\']:\n                    raise serializers.ValidationError(\n                        f"Insufficient stock. Available: {product.stock}"\n                    )\n            except Product.DoesNotExist:\n                pass  # Already handled in validate_product_id\n        return data\n\n\nclass OrderCreateSerializer(serializers.ModelSerializer):\n    """Serializer for creating orders"""\n    items = OrderItemSerializer(many=True, write_only=True)\n    \n    class Meta:\n        model = Order\n        fields = [\n            \'shipping_address\', \'billing_address\', \n            \'phone_number\', \'special_instructions\', \'items\'\n        ]\n\n    def validate_items(self, value):\n        """Validate that items list is not empty"""\n        if not value:\n            raise serializers.ValidationError("Order must contain at least one item")\n        return value\n\n    def create(self, validated_data):\n        """Create order with items"""\n        items_data = validated_data.pop(\'items\')\n        user = self.context[\'request\'].user\n        \n        # Create order\n        order = Order.objects.create(user=user, **validated_data)\n        \n        # Create order items\n        total_amount = Decimal(\'0.00\')\n        for item_data in items_data:\n            product = Product.objects.get(id=item_data[\'product_id\'])\n            \n            # Check stock availability again\n            if product.stock < item_data[\'quantity\']:\n                order.delete()  # Clean up created order\n                raise serializers.ValidationError(\n                    f"Insufficient stock for {product.name}. Available: {product.stock}"\n                )\n            \n            order_item = OrderItem.objects.create(\n                order=order,\n                product=product,\n                quantity=item_data[\'quantity\'],\n                price=product.price\n            )\n            total_amount += order_item.subtotal\n            \n            # Update product stock\n            product.stock -= item_data[\'quantity\']\n            product.save()\n        \n        # Update order total\n        order.total_amount = total_amount\n        order.save()\n        \n        return order\n\n\nclass OrderSerializer(serializers.ModelSerializer):\n    """Serializer for order details"""\n    items = OrderItemSerializer(many=True, read_only=True)\n    user = serializers.StringRelatedField(read_only=True)\n    status_display = serializers.CharField(source=\'get_status_display\', read_only=True)' additional_kwargs={} response_metadata={'id': 'msg_01Cpko9xKH9VLceiXD6ZHZuc', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--ed689b92-fba9-4265-8ecc-6abd1400f0b8-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}