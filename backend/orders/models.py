content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.utils import timezone\nfrom decimal import Decimal\nimport uuid\n\nUser = get_user_model()\n\n\nclass Cart(models.Model):\n    """Shopping cart model for storing user\'s cart items before checkout"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\'cart\')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \'orders_cart\'\n        verbose_name = \'Cart\'\n        verbose_name_plural = \'Carts\'\n\n    def __str__(self):\n        return f"Cart for {self.user.username}"\n\n    @property\n    def total_items(self):\n        """Calculate total number of items in cart"""\n        return sum(item.quantity for item in self.items.all())\n\n    @property\n    def total_price(self):\n        """Calculate total price of all items in cart"""\n        return sum(item.total_price for item in self.items.all())\n\n    def clear(self):\n        """Remove all items from cart"""\n        self.items.all().delete()\n\n\nclass CartItem(models.Model):\n    """Individual items in a shopping cart"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name=\'items\')\n    product = models.ForeignKey(\'products.Product\', on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(\n        default=1,\n        validators=[MinValueValidator(1), MaxValueValidator(999)]\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \'orders_cart_item\'\n        verbose_name = \'Cart Item\'\n        verbose_name_plural = \'Cart Items\'\n        unique_together = (\'cart\', \'product\')\n\n    def __str__(self):\n        return f"{self.quantity}x {self.product.name} in {self.cart.user.username}\'s cart"\n\n    @property\n    def total_price(self):\n        """Calculate total price for this cart item"""\n        return self.product.price * self.quantity\n\n    def save(self, *args, **kwargs):\n        """Override save to update cart\'s updated_at timestamp"""\n        super().save(*args, **kwargs)\n        self.cart.save()\n\n\nclass Order(models.Model):\n    """Order model for completed purchases"""\n    \n    class OrderStatus(models.TextChoices):\n        PENDING = \'pending\', \'Pending\'\n        CONFIRMED = \'confirmed\', \'Confirmed\'\n        PROCESSING = \'processing\', \'Processing\'\n        SHIPPED = \'shipped\', \'Shipped\'\n        DELIVERED = \'delivered\', \'Delivered\'\n        CANCELLED = \'cancelled\', \'Cancelled\'\n        REFUNDED = \'refunded\', \'Refunded\'\n\n    class PaymentStatus(models.TextChoices):\n        PENDING = \'pending\', \'Pending\'\n        PAID = \'paid\', \'Paid\'\n        FAILED = \'failed\', \'Failed\'\n        REFUNDED = \'refunded\', \'Refunded\'\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    order_number = models.CharField(max_length=20, unique=True, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\'orders\')\n    \n    # Order details\n    status = models.CharField(\n        max_length=20,\n        choices=OrderStatus.choices,\n        default=OrderStatus.PENDING\n    )' additional_kwargs={} response_metadata={'id': 'msg_01HGcGvUnVPeMTK2LM7BtzUS', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 403, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--dfbcf491-75f0-4588-954b-b174e309cd67-0' usage_metadata={'input_tokens': 403, 'output_tokens': 1024, 'total_tokens': 1427, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}