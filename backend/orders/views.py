content='from rest_framework import generics, status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom django.shortcuts import get_object_or_404\nfrom django.db import transaction\nfrom django.core.exceptions import ValidationError\nfrom django.utils import timezone\nimport logging\nimport stripe\nfrom django.conf import settings\n\nfrom .models import Order, OrderItem, Cart, CartItem\nfrom .serializers import OrderSerializer, OrderItemSerializer, CartSerializer, CartItemSerializer\nfrom products.models import Product\nfrom users.models import CustomUser\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\n# Configure Stripe\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\nclass OrderListCreateView(generics.ListCreateAPIView):\n    """\n    List all orders for authenticated user or create a new order\n    """\n    serializer_class = OrderSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        """Return orders for the current user"""\n        return Order.objects.filter(user=self.request.user).order_by(\'-created_at\')\n\n    def perform_create(self, serializer):\n        """Create a new order from user\'s cart"""\n        try:\n            with transaction.atomic():\n                # Get user\'s cart\n                cart = get_object_or_404(Cart, user=self.request.user)\n                cart_items = CartItem.objects.filter(cart=cart)\n                \n                if not cart_items.exists():\n                    raise ValidationError("Cannot create order from empty cart")\n                \n                # Calculate total amount\n                total_amount = sum(item.quantity * item.product.price for item in cart_items)\n                \n                # Create order\n                order = serializer.save(\n                    user=self.request.user,\n                    total_amount=total_amount,\n                    status=\'pending\'\n                )\n                \n                # Create order items from cart items\n                order_items = []\n                for cart_item in cart_items:\n                    # Check product availability\n                    if cart_item.product.stock_quantity < cart_item.quantity:\n                        raise ValidationError(f"Insufficient stock for {cart_item.product.name}")\n                    \n                    order_item = OrderItem(\n                        order=order,\n                        product=cart_item.product,\n                        quantity=cart_item.quantity,\n                        price=cart_item.product.price\n                    )\n                    order_items.append(order_item)\n                \n                # Bulk create order items\n                OrderItem.objects.bulk_create(order_items)\n                \n                # Update product stock\n                for cart_item in cart_items:\n                    product = cart_item.product\n                    product.stock_quantity -= cart_item.quantity\n                    product.save(update_fields=[\'stock_quantity\'])\n                \n                # Clear cart\n                cart_items.delete()\n                \n                logger.info(f"Order {order.id} created successfully for user {self.request.user.id}")\n                \n        except ValidationError as e:\n            logger.error(f"Order creation failed: {str(e)}")\n            raise\n        except Exception as e:\n            logger.error(f"Unexpected error during order creation: {str(e)}")\n            raise ValidationError("Failed to create order")\n\n\nclass OrderDetailView(generics.RetrieveUpdateAPIView):\n    """\n    Retrieve or update a specific order\n    """\n    serializer_class = OrderSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        return Order.objects.filter(user=self.request.user)\n\n    def get_object(self):\n        order = get_object_or_404(Order, id=self.kwargs[\'pk\'], user=self.request.user)\n        return order\n\n\nclass CartView(generics.RetrieveAPIView):\n    """\n    Retrieve user\'s cart with all items\n    """\n    serializer_class = CartSerializer\n    permission_classes = [IsAuthenticated]\n\n    def get_object(self):\n        cart, created = Cart.objects.get_or_create(user=self.request.user)\n        if created:\n            logger.' additional_kwargs={} response_metadata={'id': 'msg_01YKKMc1WAQhVdRvo49DKNwK', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--0ee764b5-aa77-4ee3-b0e3-947c24888fdf-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}