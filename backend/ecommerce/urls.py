content='from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_http_methods\nfrom django.views.decorators.csrf import csrf_exempt\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@csrf_exempt\n@require_http_methods(["GET"])\ndef health_check(request):\n    """Health check endpoint for monitoring and load balancers"""\n    try:\n        return JsonResponse({\n            \'status\': \'healthy\',\n            \'service\': \'ecommerce-api\',\n            \'version\': \'1.0.0\'\n        })\n    except Exception as e:\n        logger.error(f"Health check failed: {str(e)}")\n        return JsonResponse({\n            \'status\': \'unhealthy\',\n            \'error\': str(e)\n        }, status=500)\n\n@csrf_exempt\n@require_http_methods(["GET"])\ndef api_info(request):\n    """API information endpoint"""\n    return JsonResponse({\n        \'name\': \'E-commerce Platform API\',\n        \'version\': \'1.0.0\',\n        \'description\': \'Comprehensive e-commerce platform with user authentication, product management, and payment processing\',\n        \'endpoints\': {\n            \'authentication\': \'/api/auth/\',\n            \'users\': \'/api/users/\',\n            \'products\': \'/api/products/\',\n            \'orders\': \'/api/orders/\',\n            \'cart\': \'/api/cart/\',\n            \'payments\': \'/api/payments/\',\n            \'notifications\': \'/api/notifications/\',\n            \'admin\': \'/admin/\'\n        }\n    })\n\nurlpatterns = [\n    # Admin interface\n    path(\'admin/\', admin.site.urls),\n    \n    # Health check and API info\n    path(\'health/\', health_check, name=\'health_check\'),\n    path(\'api/\', api_info, name=\'api_info\'),\n    \n    # Authentication endpoints\n    path(\'api/auth/\', include(\'authentication.urls\')),\n    \n    # User management endpoints\n    path(\'api/users/\', include(\'users.urls\')),\n    \n    # Product management endpoints\n    path(\'api/products/\', include(\'products.urls\')),\n    \n    # Order management endpoints\n    path(\'api/orders/\', include(\'orders.urls\')),\n    \n    # Shopping cart endpoints\n    path(\'api/cart/\', include(\'cart.urls\')),\n    \n    # Payment processing endpoints\n    path(\'api/payments/\', include(\'payments.urls\')),\n    \n    # Notification endpoints\n    path(\'api/notifications/\', include(\'notifications.urls\')),\n]\n\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\n# Custom error handlers\ndef handler404(request, exception):\n    """Custom 404 error handler"""\n    logger.warning(f"404 error for URL: {request.path}")\n    return JsonResponse({\n        \'error\': \'Not Found\',\n        \'message\': \'The requested resource was not found.\',\n        \'status_code\': 404\n    }, status=404)\n\ndef handler500(request):\n    """Custom 500 error handler"""\n    logger.error(f"500 error for URL: {request.path}")\n    return JsonResponse({\n        \'error\': \'Internal Server Error\',\n        \'message\': \'An internal server error occurred.\',\n        \'status_code\': 500\n    }, status=500)\n\ndef handler403(request, exception):\n    """Custom 403 error handler"""\n    logger.warning(f"403 error for URL: {request.path}")\n    return JsonResponse({\n        \'error\': \'Forbidden\',\n        \'message\': \'You do not have permission to access this resource.\',\n        \'status_code\': 403\n    }, status=403)\n\ndef handler400(request, exception):\n    """Custom 400 error handler"""\n    logger.warning(f"400 error for URL: {request.path}")\n    return JsonResponse({\n        \'error\': \'Bad Request\',\n        \'message\': \'The request was invalid or cannot be served.\',' additional_kwargs={} response_metadata={'id': 'msg_01S9n6qoA9VsSEeTg7shFQn4', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--458e921b-c7b2-460a-8a1c-7e39223a38cc-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}