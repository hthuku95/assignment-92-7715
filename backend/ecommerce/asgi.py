content='import os\nimport django\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.auth import AuthMiddlewareStack\nfrom channels.security.websocket import AllowedHostsOriginValidator\nimport logging\n\n# Configure Django settings\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'ecommerce.settings\')\ndjango.setup()\n\n# Import routing after Django setup\nfrom notifications.routing import websocket_urlpatterns\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\n# Initialize Django ASGI application early to ensure the AppRegistry\n# is populated before importing code that may import ORM models\ndjango_asgi_app = get_asgi_application()\n\nclass CustomAuthMiddleware:\n    """\n    Custom authentication middleware for WebSocket connections.\n    Handles token-based authentication for WebSocket connections.\n    """\n    \n    def __init__(self, inner):\n        self.inner = inner\n\n    async def __call__(self, scope, receive, send):\n        try:\n            # Add custom authentication logic here if needed\n            # For now, use Django\'s default auth middleware\n            return await self.inner(scope, receive, send)\n        except Exception as e:\n            logger.error(f"WebSocket authentication error: {str(e)}")\n            # Close connection on auth failure\n            await send({\n                \'type\': \'websocket.close\',\n                \'code\': 4001,\n                \'reason\': \'Authentication failed\'\n            })\n\nclass LoggingMiddleware:\n    """\n    Middleware to log WebSocket connections and disconnections.\n    """\n    \n    def __init__(self, inner):\n        self.inner = inner\n\n    async def __call__(self, scope, receive, send):\n        if scope[\'type\'] == \'websocket\':\n            client_ip = scope.get(\'client\', [\'Unknown\', None])[0]\n            path = scope.get(\'path\', \'Unknown\')\n            logger.info(f"WebSocket connection attempt from {client_ip} to {path}")\n            \n            async def logged_send(message):\n                if message[\'type\'] == \'websocket.accept\':\n                    logger.info(f"WebSocket connection accepted for {client_ip}")\n                elif message[\'type\'] == \'websocket.close\':\n                    logger.info(f"WebSocket connection closed for {client_ip}")\n                await send(message)\n            \n            return await self.inner(scope, receive, logged_send)\n        else:\n            return await self.inner(scope, receive, send)\n\n# Create the ASGI application with proper middleware stack\napplication = ProtocolTypeRouter({\n    # HTTP protocol handler\n    "http": django_asgi_app,\n    \n    # WebSocket protocol handler with middleware stack\n    "websocket": LoggingMiddleware(\n        AllowedHostsOriginValidator(\n            CustomAuthMiddleware(\n                AuthMiddlewareStack(\n                    URLRouter(websocket_urlpatterns)\n                )\n            )\n        )\n    ),\n})\n\n# Health check function for deployment\nasync def health_check(scope, receive, send):\n    """\n    Simple health check endpoint for load balancers.\n    """\n    if scope[\'type\'] == \'http\' and scope[\'path\'] == \'/health/\':\n        await send({\n            \'type\': \'http.response.start\',\n            \'status\': 200,\n            \'headers\': [[b\'content-type\', b\'text/plain\']],\n        })\n        await send({\n            \'type\': \'http.response.body\',\n            \'body\': b\'OK\',\n        })\n    else:\n        await application(scope, receive, send)\n\n# Use health check wrapper in production\nif os.environ.get(\'DJANGO_ENV\') == \'production\':\n    application = health_check\n\n# Configure application for different environments\ndef get_application():\n    """\n    Factory function to get the appropriate ASGI application\n    based on environment settings.\n    """\n    env = os.environ.get(\'DJANGO_ENV\', \'development\')\n    \n    if env == \'production\':\n        # Add production-specific middleware\n        logger.info("Starting ASGI application in production mode")\n        return application\n    elif env == \'testing\':\n        # Simplified application for' additional_kwargs={} response_metadata={'id': 'msg_019et2bP2uEXiXjvxW9aDba1', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 406, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--ebcb0138-a11a-43e1-b31c-de54f6724ac0-0' usage_metadata={'input_tokens': 406, 'output_tokens': 1024, 'total_tokens': 1430, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}