content='"""\nWSGI config for ecommerce project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n"""\n\nimport os\nimport sys\nfrom pathlib import Path\n\nfrom django.core.wsgi import get_wsgi_application\n\n# Build paths inside the project like this: BASE_DIR / \'subdir\'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Add the project directory to Python path\nsys.path.append(str(BASE_DIR))\n\n# Set the default Django settings module\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'ecommerce.settings\')\n\ntry:\n    # Get the WSGI application\n    application = get_wsgi_application()\nexcept Exception as e:\n    # Log the error for debugging\n    import logging\n    logging.basicConfig(level=logging.ERROR)\n    logger = logging.getLogger(__name__)\n    logger.error(f"Failed to initialize WSGI application: {e}")\n    \n    # Re-raise the exception to prevent silent failures\n    raise\n\n# Optional: Add middleware for production monitoring\ntry:\n    # Import whitenoise for static file serving (if installed)\n    from whitenoise import WhiteNoise\n    application = WhiteNoise(application)\n    \n    # Add static files root if configured\n    static_root = os.environ.get(\'STATIC_ROOT\')\n    if static_root and os.path.exists(static_root):\n        application.add_files(static_root, prefix=\'static/\')\n        \nexcept ImportError:\n    # WhiteNoise not installed, continue without it\n    pass\n\n# Health check endpoint for load balancers\ndef health_check_application(environ, start_response):\n    """Simple health check endpoint for load balancers."""\n    if environ.get(\'PATH_INFO\') == \'/health/\':\n        status = \'200 OK\'\n        headers = [(\'Content-Type\', \'text/plain\')]\n        start_response(status, headers)\n        return [b\'OK\']\n    \n    # Pass through to Django application\n    return application(environ, start_response)\n\n# Use health check wrapper in production\nif os.environ.get(\'DJANGO_SETTINGS_MODULE\') == \'ecommerce.settings.production\':\n    application = health_check_application' additional_kwargs={} response_metadata={'id': 'msg_01NW8oaZxi85bh5aP9NNjkME', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 582, 'service_tier': 'standard'}} id='run--e1195825-5dd5-48ad-bd58-95abd06b595d-0' usage_metadata={'input_tokens': 404, 'output_tokens': 582, 'total_tokens': 986, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}