content='#!/usr/bin/env python\n"""Django\'s command-line utility for administrative tasks."""\nimport os\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Configure logging for management commands\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n)\n\nlogger = logging.getLogger(__name__)\n\n\ndef main():\n    """Run administrative tasks."""\n    try:\n        # Set the default settings module for Django\n        os.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'ecommerce.settings\')\n        \n        # Validate Python version\n        if sys.version_info < (3, 8):\n            logger.error("Python 3.8 or higher is required")\n            sys.exit(1)\n        \n        # Import Django management utilities\n        try:\n            from django.core.management import execute_from_command_line\n        except ImportError as exc:\n            logger.error(\n                "Couldn\'t import Django. Are you sure it\'s installed and "\n                "available on your PYTHONPATH environment variable? Did you "\n                "forget to activate a virtual environment?"\n            )\n            raise ImportError(\n                "Couldn\'t import Django. Are you sure it\'s installed and "\n                "available on your PYTHONPATH environment variable? Did you "\n                "forget to activate a virtual environment?"\n            ) from exc\n        \n        # Validate settings file exists\n        settings_module = os.environ.get(\'DJANGO_SETTINGS_MODULE\', \'ecommerce.settings\')\n        settings_path = settings_module.replace(\'.\', \'/\') + \'.py\'\n        \n        if not Path(settings_path).exists():\n            logger.warning(f"Settings file {settings_path} not found, using default Django settings")\n        \n        # Log management command execution\n        if len(sys.argv) > 1:\n            command = sys.argv[1]\n            logger.info(f"Executing Django management command: {command}")\n            \n            # Special handling for common commands\n            if command == \'runserver\':\n                logger.info("Starting Django development server...")\n            elif command == \'migrate\':\n                logger.info("Running database migrations...")\n            elif command == \'collectstatic\':\n                logger.info("Collecting static files...")\n            elif command == \'test\':\n                logger.info("Running test suite...")\n        \n        # Execute the management command\n        execute_from_command_line(sys.argv)\n        \n    except KeyboardInterrupt:\n        logger.info("Operation cancelled by user")\n        sys.exit(0)\n    except Exception as e:\n        logger.error(f"An error occurred: {str(e)}")\n        sys.exit(1)\n\n\nif __name__ == \'__main__\':\n    main()' additional_kwargs={} response_metadata={'id': 'msg_01Y58Zf7anyCRawVT96wyQyQ', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 396, 'output_tokens': 673, 'service_tier': 'standard'}} id='run--b117593a-21cf-420a-bcc0-6d1718a8c9de-0' usage_metadata={'input_tokens': 396, 'output_tokens': 673, 'total_tokens': 1069, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}