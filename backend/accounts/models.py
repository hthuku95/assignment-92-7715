content='from django.contrib.auth.models import AbstractUser\nfrom django.db import models\nfrom django.core.validators import RegexValidator\nfrom django.utils.translation import gettext_lazy as _\nfrom django.core.exceptions import ValidationError\nfrom PIL import Image\nimport os\n\n\nclass User(AbstractUser):\n    """\n    Extended user model with additional fields for e-commerce platform\n    """\n    email = models.EmailField(\n        _(\'email address\'),\n        unique=True,\n        help_text=_(\'Required. Enter a valid email address.\')\n    )\n    phone_number = models.CharField(\n        max_length=20,\n        validators=[\n            RegexValidator(\n                regex=r\'^\\+?1?\\d{9,15}$\',\n                message="Phone number must be entered in the format: \'+999999999\'. Up to 15 digits allowed."\n            )\n        ],\n        blank=True,\n        null=True,\n        help_text=_(\'Optional. Phone number for contact and delivery.\')\n    )\n    date_of_birth = models.DateField(\n        blank=True,\n        null=True,\n        help_text=_(\'Optional. Date of birth for age verification.\')\n    )\n    is_verified = models.BooleanField(\n        default=False,\n        help_text=_(\'Designates whether this user has verified their email address.\')\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    USERNAME_FIELD = \'email\'\n    REQUIRED_FIELDS = [\'username\', \'first_name\', \'last_name\']\n\n    class Meta:\n        db_table = \'accounts_user\'\n        verbose_name = _(\'User\')\n        verbose_name_plural = _(\'Users\')\n\n    def __str__(self):\n        return f"{self.get_full_name()} ({self.email})"\n\n    def get_full_name(self):\n        """Return the first_name plus the last_name, with a space in between."""\n        full_name = f"{self.first_name} {self.last_name}"\n        return full_name.strip()\n\n    def get_short_name(self):\n        """Return the short name for the user."""\n        return self.first_name\n\n    def clean(self):\n        """Validate user data"""\n        super().clean()\n        if self.email:\n            self.email = self.email.lower()\n\n\nclass UserProfile(models.Model):\n    """\n    Extended profile information for users\n    """\n    GENDER_CHOICES = [\n        (\'M\', _(\'Male\')),\n        (\'F\', _(\'Female\')),\n        (\'O\', _(\'Other\')),\n        (\'N\', _(\'Prefer not to say\')),\n    ]\n\n    user = models.OneToOneField(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\'profile\',\n        help_text=_(\'User associated with this profile.\')\n    )\n    avatar = models.ImageField(\n        upload_to=\'avatars/\',\n        blank=True,\n        null=True,\n        help_text=_(\'Profile picture for the user.\')\n    )\n    bio = models.TextField(\n        max_length=500,\n        blank=True,\n        help_text=_(\'Brief description about the user.\')\n    )\n    gender = models.CharField(\n        max_length=1,\n        choices=GENDER_CHOICES,\n        blank=True,\n        help_text=_(\'User gender.\')\n    )\n    website = models.URLField(\n        blank=True,\n        help_text=_(\'Personal or business website.\')\n    )\n    newsletter_subscription = models.BooleanField(\n        default=True,\n        help_text=_(\'Whether user wants to receive newsletter emails.\')\n    )\n    marketing_emails = models.BooleanField(\n        default=False,\n        help_text=_(\'Whether user wants to receive marketing emails.\')\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \'accounts_userprofile\'\n        verbose_' additional_kwargs={} response_metadata={'id': 'msg_01RE2iFPg5r1FAmcV2169cKR', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 399, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--b770860b-f667-43fe-9322-f4555baceaba-0' usage_metadata={'input_tokens': 399, 'output_tokens': 1024, 'total_tokens': 1423, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}