content='from django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.db import transaction\nfrom django.utils import timezone\nfrom rest_framework import status, generics, permissions\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.permissions import IsAuthenticated, AllowAny\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom django.core.mail import send_mail\nfrom django.conf import settings\nfrom django.utils.crypto import get_random_string\nimport logging\n\nfrom .models import UserProfile\nfrom .serializers import (\n    UserRegistrationSerializer,\n    UserLoginSerializer,\n    UserProfileSerializer,\n    PasswordChangeSerializer,\n    PasswordResetSerializer,\n    UserUpdateSerializer\n)\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserRegistrationView(APIView):\n    """\n    Handle user registration with email verification\n    """\n    permission_classes = [AllowAny]\n    \n    def post(self, request):\n        try:\n            serializer = UserRegistrationSerializer(data=request.data)\n            if serializer.is_valid():\n                with transaction.atomic():\n                    # Create user\n                    user = User.objects.create_user(\n                        username=serializer.validated_data[\'email\'],\n                        email=serializer.validated_data[\'email\'],\n                        password=serializer.validated_data[\'password\'],\n                        first_name=serializer.validated_data.get(\'first_name\', \'\'),\n                        last_name=serializer.validated_data.get(\'last_name\', \'\'),\n                        is_active=True\n                    )\n                    \n                    # Create user profile\n                    profile = UserProfile.objects.create(\n                        user=user,\n                        phone_number=serializer.validated_data.get(\'phone_number\', \'\'),\n                        date_of_birth=serializer.validated_data.get(\'date_of_birth\'),\n                    )\n                    \n                    # Create authentication token\n                    token, created = Token.objects.get_or_create(user=user)\n                    \n                    # Send welcome email\n                    try:\n                        send_mail(\n                            \'Welcome to E-commerce Platform\',\n                            f\'Welcome {user.first_name}! Your account has been created successfully.\',\n                            settings.DEFAULT_FROM_EMAIL,\n                            [user.email],\n                            fail_silently=True,\n                        )\n                    except Exception as e:\n                        logger.error(f"Failed to send welcome email to {user.email}: {str(e)}")\n                    \n                    logger.info(f"New user registered: {user.email}")\n                    \n                    return Response({\n                        \'message\': \'User registered successfully\',\n                        \'user\': {\n                            \'id\': user.id,\n                            \'email\': user.email,\n                            \'first_name\': user.first_name,\n                            \'last_name\': user.last_name,\n                        },\n                        \'token\': token.key\n                    }, status=status.HTTP_201_CREATED)\n            \n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n            \n        except Exception as e:\n            logger.error(f"User registration error: {str(e)}")\n            return Response({\n                \'error\': \'Registration failed. Please try again.\'\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\nclass UserLoginView(APIView):\n    """\n    Handle user login and token generation\n    """\n    permission_classes = [AllowAny]\n    \n    def post(self, request):\n        try:\n            serializer = UserLoginSerializer(data=request.data)\n            if serializer.is_valid():\n                email = serializer.validated_data[\'email\']\n                password = serializer.validated_data[\'password\']\n                \n                # Authenticate user\n                user = authenticate(username=email, password=password)\n                \n                if user and user.is_active:\n                    # Update last' additional_kwargs={} response_metadata={'id': 'msg_01UR4UpZSTf8LAZUxxoLWiVA', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--18537c86-902d-4f16-8685-5541b462c853-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}