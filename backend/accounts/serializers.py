content='from rest_framework import serializers\nfrom django.contrib.auth import authenticate, get_user_model\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\nimport logging\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user registration with password confirmation and validation.\n    """\n    password = serializers.CharField(\n        write_only=True,\n        min_length=8,\n        style={\'input_type\': \'password\'}\n    )\n    password_confirm = serializers.CharField(\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n    \n    class Meta:\n        model = User\n        fields = (\'id\', \'username\', \'email\', \'first_name\', \'last_name\', \n                 \'password\', \'password_confirm\')\n        extra_kwargs = {\n            \'password\': {\'write_only\': True},\n            \'email\': {\'required\': True},\n        }\n\n    def validate_email(self, value):\n        """\n        Validate that email is unique and properly formatted.\n        """\n        if User.objects.filter(email=value).exists():\n            raise serializers.ValidationError(\n                _("A user with this email already exists.")\n            )\n        return value.lower()\n\n    def validate_username(self, value):\n        """\n        Validate username uniqueness and format.\n        """\n        if User.objects.filter(username=value).exists():\n            raise serializers.ValidationError(\n                _("A user with this username already exists.")\n            )\n        return value\n\n    def validate(self, attrs):\n        """\n        Validate password confirmation and strength.\n        """\n        password = attrs.get(\'password\')\n        password_confirm = attrs.get(\'password_confirm\')\n\n        if password != password_confirm:\n            raise serializers.ValidationError({\n                \'password_confirm\': _("Password fields didn\'t match.")\n            })\n\n        # Validate password strength using Django\'s validators\n        try:\n            validate_password(password)\n        except ValidationError as e:\n            raise serializers.ValidationError({\n                \'password\': list(e.messages)\n            })\n\n        return attrs\n\n    def create(self, validated_data):\n        """\n        Create user with encrypted password.\n        """\n        validated_data.pop(\'password_confirm\', None)\n        \n        try:\n            user = User.objects.create_user(\n                username=validated_data[\'username\'],\n                email=validated_data[\'email\'],\n                password=validated_data[\'password\'],\n                first_name=validated_data.get(\'first_name\', \'\'),\n                last_name=validated_data.get(\'last_name\', \'\')\n            )\n            logger.info(f"New user registered: {user.username}")\n            return user\n        except Exception as e:\n            logger.error(f"User registration failed: {str(e)}")\n            raise serializers.ValidationError(\n                _("Registration failed. Please try again.")\n            )\n\n\nclass UserLoginSerializer(serializers.Serializer):\n    """\n    Serializer for user authentication with email or username.\n    """\n    username = serializers.CharField(\n        max_length=150,\n        help_text=_("Username or email address")\n    )\n    password = serializers.CharField(\n        style={\'input_type\': \'password\'},\n        trim_whitespace=False\n    )\n\n    def validate(self, attrs):\n        """\n        Authenticate user with username/email and password.\n        """\n        username = attrs.get(\'username\')\n        password = attrs.get(\'password\')\n\n        if username and password:\n            # Try to authenticate with username first\n            user = authenticate(\n                request=self.context.get(\'request\'),\n                username=username,\n                password=password\n            )\n\n            # If authentication failed, try with email\n            if not user:\n                try:\n                    user_obj = User.objects.get(email=username)\n                    user = authenticate(\n                        request=self.context.get(\'request\'),\n                        username=user_obj.username,\n                        password=password\n                    ' additional_kwargs={} response_metadata={'id': 'msg_01MMuoNq1Dtx27WHo1RojQ49', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--efdac2a4-80c9-4714-a4af-57e685fb15ef-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}