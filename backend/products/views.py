content='from rest_framework import generics, status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom django.db.models import Q, Avg, Count\nfrom django.core.cache import cache\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom django.shortcuts import get_object_or_404\nimport logging\n\nfrom .models import Product, Category, ProductImage, ProductReview\nfrom .serializers import (\n    ProductSerializer, \n    ProductDetailSerializer, \n    CategorySerializer,\n    ProductReviewSerializer\n)\nfrom .filters import ProductFilter\nfrom .permissions import IsOwnerOrReadOnly\n\nlogger = logging.getLogger(__name__)\n\n\nclass ProductListCreateView(generics.ListCreateAPIView):\n    """\n    List all products or create a new product.\n    Supports filtering, searching, and ordering.\n    """\n    queryset = Product.objects.select_related(\'category\').prefetch_related(\n        \'images\', \'reviews\'\n    ).annotate(\n        avg_rating=Avg(\'reviews__rating\'),\n        review_count=Count(\'reviews\')\n    )\n    serializer_class = ProductSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    filterset_class = ProductFilter\n    search_fields = [\'name\', \'description\', \'category__name\']\n    ordering_fields = [\'created_at\', \'price\', \'avg_rating\']\n    ordering = [\'-created_at\']\n\n    def get_queryset(self):\n        """Filter products based on availability and user permissions."""\n        queryset = super().get_queryset()\n        \n        # Only show available products for non-staff users\n        if not self.request.user.is_staff:\n            queryset = queryset.filter(is_available=True, stock_quantity__gt=0)\n        \n        return queryset\n\n    def perform_create(self, serializer):\n        """Set the owner of the product to the current user."""\n        try:\n            serializer.save(created_by=self.request.user)\n            logger.info(f"Product created by user {self.request.user.id}")\n        except Exception as e:\n            logger.error(f"Error creating product: {str(e)}")\n            raise\n\n\nclass ProductDetailView(generics.RetrieveUpdateDestroyAPIView):\n    """\n    Retrieve, update, or delete a product instance.\n    """\n    queryset = Product.objects.select_related(\'category\').prefetch_related(\n        \'images\', \'reviews__user\'\n    ).annotate(\n        avg_rating=Avg(\'reviews__rating\'),\n        review_count=Count(\'reviews\')\n    )\n    serializer_class = ProductDetailSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly]\n    lookup_field = \'slug\'\n\n    def get_object(self):\n        """Get product and increment view count."""\n        obj = super().get_object()\n        \n        # Increment view count (use cache to prevent spam)\n        cache_key = f"product_view_{obj.id}_{self.request.META.get(\'REMOTE_ADDR\')}"\n        if not cache.get(cache_key):\n            obj.view_count += 1\n            obj.save(update_fields=[\'view_count\'])\n            cache.set(cache_key, True, timeout=300)  # 5 minutes\n            \n        return obj\n\n    def perform_update(self, serializer):\n        """Log product updates."""\n        try:\n            serializer.save()\n            logger.info(f"Product {serializer.instance.id} updated by user {self.request.user.id}")\n        except Exception as e:\n            logger.error(f"Error updating product: {str(e)}")\n            raise\n\n    def perform_destroy(self, instance):\n        """Soft delete product instead of hard delete."""\n        try:\n            instance.' additional_kwargs={} response_metadata={'id': 'msg_01HpEmhcHhq4CM7b5UiM9AkS', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--c0c6ed20-713d-4861-aeba-2283a41ffdd9-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}