content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom .models import Product, Category, ProductImage, ProductReview, ProductVariant, Inventory\n\nUser = get_user_model()\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    """Serializer for product categories"""\n    \n    class Meta:\n        model = Category\n        fields = [\'id\', \'name\', \'slug\', \'description\', \'parent\', \'image\', \'is_active\', \'created_at\', \'updated_at\']\n        read_only_fields = [\'id\', \'created_at\', \'updated_at\']\n\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    """Serializer for product images"""\n    \n    class Meta:\n        model = ProductImage\n        fields = [\'id\', \'image\', \'alt_text\', \'is_primary\', \'order\']\n        read_only_fields = [\'id\']\n\n\nclass ProductVariantSerializer(serializers.ModelSerializer):\n    """Serializer for product variants"""\n    \n    class Meta:\n        model = ProductVariant\n        fields = [\'id\', \'name\', \'sku\', \'price\', \'compare_at_price\', \'inventory_quantity\', \'weight\', \'requires_shipping\']\n        read_only_fields = [\'id\']\n\n    def validate_price(self, value):\n        """Validate that price is positive"""\n        if value <= 0:\n            raise serializers.ValidationError("Price must be greater than zero.")\n        return value\n\n    def validate_inventory_quantity(self, value):\n        """Validate that inventory quantity is non-negative"""\n        if value < 0:\n            raise serializers.ValidationError("Inventory quantity cannot be negative.")\n        return value\n\n\nclass InventorySerializer(serializers.ModelSerializer):\n    """Serializer for inventory management"""\n    \n    class Meta:\n        model = Inventory\n        fields = [\'id\', \'quantity\', \'reserved_quantity\', \'available_quantity\', \'low_stock_threshold\', \'updated_at\']\n        read_only_fields = [\'id\', \'available_quantity\', \'updated_at\']\n\n    def validate_quantity(self, value):\n        """Validate that quantity is non-negative"""\n        if value < 0:\n            raise serializers.ValidationError("Quantity cannot be negative.")\n        return value\n\n    def validate_reserved_quantity(self, value):\n        """Validate that reserved quantity is non-negative"""\n        if value < 0:\n            raise serializers.ValidationError("Reserved quantity cannot be negative.")\n        return value\n\n\nclass ProductReviewSerializer(serializers.ModelSerializer):\n    """Serializer for product reviews"""\n    user = serializers.StringRelatedField(read_only=True)\n    user_id = serializers.IntegerField(write_only=True, required=False)\n    \n    class Meta:\n        model = ProductReview\n        fields = [\'id\', \'user\', \'user_id\', \'product\', \'rating\', \'title\', \'comment\', \'is_verified\', \'created_at\', \'updated_at\']\n        read_only_fields = [\'id\', \'user\', \'is_verified\', \'created_at\', \'updated_at\']\n\n    def validate_rating(self, value):\n        """Validate that rating is between 1 and 5"""\n        if value < 1 or value > 5:\n            raise serializers.ValidationError("Rating must be between 1 and 5.")\n        return value\n\n    def validate(self, data):\n        """Validate that user hasn\'t already reviewed this product"""\n        user = self.context[\'request\'].user\n        product = data.get(\'product\')\n        \n        if ProductReview.objects.filter(user=user, product=product).exists():\n            raise serializers.ValidationError("You have already reviewed this product.")\n        \n        return data\n\n    def create(self, validated_data):\n        """Create review with authenticated user"""\n        validated_data[\'user\'] = self.context[\'request\'].user\n        return super().create(validated_data)\n\n\nclass ProductListSerializer(serializers.ModelSerializer):\n    """Serializer for product list view (lightweight)"""\n    category = CategorySerializer(read_only=True)\n    primary' additional_kwargs={} response_metadata={'id': 'msg_01FP5tLVwBXBfVdYzfn1iChA', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 400, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--ec458e97-a7b9-413b-a7c1-ec91f09616ce-0' usage_metadata={'input_tokens': 400, 'output_tokens': 1024, 'total_tokens': 1424, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}