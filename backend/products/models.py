content='from django.db import models\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.utils import timezone\nfrom decimal import Decimal\nimport uuid\n\n\nclass Category(models.Model):\n    """Product category model for organizing products"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    image = models.ImageField(upload_to=\'categories/\', blank=True, null=True)\n    parent = models.ForeignKey(\n        \'self\', \n        on_delete=models.CASCADE, \n        blank=True, \n        null=True,\n        related_name=\'children\'\n    )\n    is_active = models.BooleanField(default=True)\n    sort_order = models.PositiveIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        verbose_name_plural = "Categories"\n        ordering = [\'sort_order\', \'name\']\n        indexes = [\n            models.Index(fields=[\'slug\']),\n            models.Index(fields=[\'is_active\']),\n            models.Index(fields=[\'parent\']),\n        ]\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return f\'/categories/{self.slug}/\'\n\n    def get_full_path(self):\n        """Get the full category path including parents"""\n        if self.parent:\n            return f"{self.parent.get_full_path()} > {self.name}"\n        return self.name\n\n    def get_children(self):\n        """Get all child categories"""\n        return self.children.filter(is_active=True)\n\n    def get_all_products(self):\n        """Get all products in this category and its subcategories"""\n        from django.db.models import Q\n        categories = [self]\n        for child in self.get_children():\n            categories.extend(child.get_all_products())\n        return Product.objects.filter(\n            Q(category__in=categories) & Q(is_active=True)\n        )\n\n\nclass Product(models.Model):\n    """Main product model"""\n    STATUS_CHOICES = [\n        (\'draft\', \'Draft\'),\n        (\'active\', \'Active\'),\n        (\'inactive\', \'Inactive\'),\n        (\'discontinued\', \'Discontinued\'),\n    ]\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    slug = models.SlugField(max_length=200, unique=True)\n    sku = models.CharField(max_length=50, unique=True)\n    description = models.TextField()\n    short_description = models.CharField(max_length=500, blank=True)\n    \n    # Pricing\n    price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    compare_at_price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2, \n        blank=True, \n        null=True,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    cost_price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2, \n        blank=True, \n        null=True,\n        validators=[MinValueValidator(Decimal(\'0.00\'))]\n    )\n    \n    # Organization\n    category = models.ForeignKey(\n        Category, \n        on_delete=models.SET_NULL, \n        null=True, \n        related_name=\'products\'\n    )\n    tags = models.CharField(max_length=500, blank=True, help_text="Comma-separated tags")\n    \n    # Physical attributes\n    weight = models' additional_kwargs={} response_metadata={'id': 'msg_015kR2BksLc4LD1UHYu11ZuL', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--98137f1d-07bc-4d28-8396-50a898b12f3f-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}